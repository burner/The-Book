>== Introducing C++ ==
<input type="hidden" value="d41d8cd98f00b204e9800998ecf8427e" name="wpAutoSummary" /><input type="hidden" value="0" name="oldid" /><textarea tabindex="1" accesskey="," id="wpTextbox1" cols="80" rows="25" style="" name="wpTextbox1">== Introducing C++ ==
[[Image:C plus plus.svg|35px|left]](pronounced "see plus plus") is a ''general-purpose'', ''statically typed'', ''free-form'', ''multi-paradigm'' '''''[[C++ Programming/Programming Languages|programming language]]''''' supporting procedural programming, data abstraction, and generic programming. During the [[w:1990s|1990s]], '''C++''' became one of the most popular computer programming languages.

=== History ===
[[Image:BjarneStroustrup.jpg|300px|right|Photo of Bjarne Stroustrup, creator of the programming language C++.]]
[[w:Bjarne Stroustrup|Bjarne Stroustrup]], a Computer Scientist from [[w:Bell Labs|Bell Labs]], was the designer and original implementer of '''C++''' (originally named "C with Classes") during the 1980s as an enhancement to the [[C Programming|C programming language]]. Enhancements started with the addition [[w:object-oriented|object-oriented]] concepts like [[C++ Programming/Classes|classes]], followed by, among many features, [[C++ Programming/Polymorphism|virtual functions]], [[C++ Programming/Operators/Operator Overloading|operator overloading]], [[C++ Programming/Programming Languages/Paradigms/Inheritance|multiple inheritance]], [[C++ Programming/Templates|templates]], and [[C++ Programming/Exception Handling|exception handling]]. These and other features are covered in detail along this book.

The '''C++ programming language''' is a standard recognized by the [[w:American National Standards Institute|ANSI]] (The American National Standards Institute), BSI (The British Standards Institute), DIN (The German national standards organization), and several other national standards bodies, and was ratified in 1998 by the ISO (The International Standards Organization) as ''[[w:ISO/IEC 14882|ISO/IEC 14882]]:1998'', consists of two parts: the Core Language and the Standard Library; the latter includes the [[C++ Programming/STL|Standard Template Library]] and the [[C++ Programming/Code/Standard C Library|Standard C Library]] (ANSI C 89).

Features introduced in '''C++''' include declarations as statements, function-like casts, <code>new</code>/<code>delete</code>, <tt>bool</tt>, reference types, <tt>const</tt>, {{C++ Programming/kw|inline}} functions, default arguments, function overloading, [[C++ Programming/Programming Languages/C++/Code/Statements/Scope/Namespaces|namespaces]], classes (including all class-related features such as inheritance, member functions, virtual functions, abstract classes, and constructors), operator overloading, templates, the <code>::</code> operator, exception handling, run-time type identification, and more type checking in several cases. Comments starting with two slashes ("<tt>//</tt>") were originally part of [[w:BCPL|BCPL]], and were reintroduced in '''C++'''. Several features of C++ were later adopted by C, including <code>const</code>, {{C++ Programming/kw|inline}}, declarations in {{C++ Programming/kw|for}} loops, and '''C++'''-style comments (using the <tt>//</tt> symbol).

The current version,  which is the 2003 version, ''ISO/IEC 14882:2003'' redefines the standard language as a single item. The STL that pre-dated the standardization of '''C++''' and was originally implemented in Ada is now an integral part of the standard and a requirement for a compliant implementation of the same. Many other '''C++''' libraries exist which are not part of the Standard, such as [[C++ Programming/Libraries/Boost|Boost]]. Also, non-Standard libraries written in C can generally be used by '''C++''' programs.

Since 2004, the standards committee (which includes Bjarne Stroustrup) has been busy working out the details of a new revision of the standard, temporarily titled C++0x, due for publication in the end of 2011. Some implementations already support some of the proposed alterations.

;''C++ source code example''
{{:C++ Programming/Examples/Hello World}}

Traditionally the first program people write in a new language is called "Hello World." because all it does is print the words '''Hello World'''. [[C++ Programming/Examples/Hello world|Hello World Explained]] (in the [[C++ Programming/Examples|Examples Appendix]]) offers a detailed explanation of this code; the included source code is to give you an idea of a simple '''C++''' program.

=== Overview ===
Before you begin your journey to understand how to write programs using '''C++''', it is important to understand a few key concepts that you may encounter. These concepts are not unique to '''C++''', but are helpful to understanding computer programming in general. Readers who have experience in another programming language may wish to skim through or skip this section entirely.

There are many different kinds of programs in use today. From the operating system you use that makes sure everything works as it should, to the video games and music applications you use for fun, programs can fulfill many different purposes. What all '''programs''' (also called '''software''' or '''applications''') have in common is that they all are made up of a sequence of instructions written in some form of programming language. These instructions tell a computer what to do, and generally how to do it. Programs can contain anything from instructions to solve math problems or send emails, to how to behave when a video game character is shot in a game. The computer will follow the instructions of a program one instruction at a time from start to finish.

=== Why learn C++ ? ===
Why not? This is the most clarifying approach to the decision to learn anything. Although learning is always good, selecting what you learn is more important as it is how you will prioritize tasks.  Another side of this problem is that you will be investing some time in getting a new skill set. You must decide how this will benefit you. Check your objectives and compare similar projects or see what the programming market is in need of. In any case, the more programming languages you know, the better.

If you are approaching the learning process only to add another notch under your belt, that is, willing only to dedicate enough effort to understand its major quirks and learn something about its dark corners, then you would be best served in learning two other languages first. This will clarify what makes '''C++''' special in its approach to programming problems. You should select one imperative and one object-oriented language. C will probably be the best choice for the former, as it has a good market value and a direct relation to '''C++''', although a good substitute would be ASM. Java is a good choice for the other language, for similar reasons.

If you are willing to dedicate a more than passing interest in '''C++''' then you can even learn it as your first language. Make sure to dedicate some time understanding the different paradigms and why C++ is a multi-paradigm, or hybrid, language.

Although learning C is not a requirement for understanding '''C++''', you must know how to use an imperative language. '''C++''' will not make it easy for you to understand and distinguish some of these deeper concepts, since in it you are free to implement solutions with a greater range of freedom.  Understanding which options to choose will become the cornerstone of mastering the language.

You should not learn '''C++''' if you are only interested in learning Object-oriented Programing, since the nomenclature used and some of the approaches taken to problems will make it more difficult to learn and master those concepts. If you are truly interested in Object-oriented programming, you should learn Smalltalk.

As with all languages, '''C++''' has a specific scope of application where it can truly shine. C++ is harder to learn than C and Java but more powerful than both. '''C++''' enables you to abstract from the little things you have to deal with in C or other lower level languages but will grant you more control and responsibility than Java. As it will not provide the default features you can obtain in similar higher level languages, you will have to search and examine several external implementations of those features and freely select those that best serve your purposes (or implement your own solution).

{{BookCat}}
